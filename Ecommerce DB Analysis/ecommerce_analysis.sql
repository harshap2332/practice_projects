create database ecommerce_db;

use ecommerce_db;


-- PRINT THE OVERALL REVENUE MADE BY THE E-COMMERCE COMPANY
SELECT ROUND(SUM(TOTAL_ORDER_AMOUNT) / 1000000, 2) AS 'TOTAL REVENUE (in millions)' FROM ORDERS;

-- PRINT THE ORDER DETAILS BETWEEN 10000 AND 20000 AND THEN SORT THE DATA IN ASC ORDER ON ORDER ID COLUMN
SELECT * FROM ORDERS
WHERE Total_order_amount BETWEEN 10000 AND 20000
ORDER BY OrderID ASC;

-- FIND THE NUMBER OF CUSTOMERS BELONGING TO THE CITY OF EVERY COUNTRY. PRINT CITY, COUNTRY AND NUMBER OF THE CUSTOMER TO EACH CITY AND COUNTRY (COMBINATION).
-- SORT THE DATA ON CITY COLUMNS (HINT - WE WILL USING GROUP BY FUNCTION AND IT WILL BE ON 2 COLUMNS)
Select city, country, count(DISTINCT customerID) AS 'Number of customers' from Customers group by city, country order by city, country;

-- FIND THE NUMBER OF CUSTOMERS BELONGING TO THE CITY OF EVERY COUNTRY. PRINT CITY, COUNTRY AND NUMBER OF THE CUSTOMER TO EACH CITY AND COUNTRY (COMBINATION).
-- SORT THE DATA ON CITY COLUMNS (HINT - WE WILL USING GROUP BY FUNCTION AND IT WILL BE ON 2 COLUMNS) (filter where customers are less than 3)
select City, Country, COUNT(distinct CustomerID) num_of_cust
from Customers
group by Country, City
having COUNT(distinct CustomerID) < 3
order by City

-- Print all the details of the customers where first_name starts with a vowel. sort the results in ascending order on customer id
select *
from Customers
where FirstName like '[a,e,i,o,u]%'
order by CustomerID

Select * from customers where left(firstname, 1) in ('a', 'e', 'i', 'o', 'u') order by customerID

-- Count the number of orders placed through each payment method. Print the paymentid, payment type and number of orders placed. Sort the output in asc on paymentid column
select p.paymentid, p.PaymentType, count(distinct o.orderid) as 'Number of Orders'
from orders o
join payments p
on o.paymentid = p.paymentid
group by p.paymentid, p.PaymentType
order by p.paymentid

-- 24TH JUNE 2024

USE ECOMMERCE_DB;

-- IDENTIFY THE TOP 10 MOST EXPENSIVE ORDERS. PRINT CUSTOMER ID, FIRST NAME, LAST NAME AND TOTAL ORDER AMOUNT AND THEN SORT IN IT IN DESC ORDER ON TOA.
SELECT TOP 10 C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, MAX(O.TOTAL_ORDER_AMOUNT) AS 'EXPENSIVE_ORDERS'
FROM CUSTOMERS C
JOIN ORDERS O
ON C.CustomerID = O.CustomerID
GROUP BY C.CUSTOMERID, C.FirstName, C.LastName
ORDER BY EXPENSIVE_ORDERS DESC;

-- PRINT ALL THE DETAILS OF THE CUSTOMER WHO ORDERED ONLY ONCE.
SELECT C.* FROM Customers C
JOIN (SELECT CUSTOMERID, COUNT(CUSTOMERID) AS 'COUNT_OF_ORDERS'
FROM ORDERS
GROUP BY CUSTOMERID
HAVING COUNT(CUSTOMERID) = 1) AS O
ON C.CustomerID = O.CustomerID;

-- IDENTIFY THE TOP 3 COUNTRIES WHO HAVE PLACED THE LEAST NUMBER OF THE ORDERS AND THEN SORT THE OUTPUT IN DESC ORDER BASED ON NUMBER OF THE ORDERS
-- PRINT THE COUNTRY AND NUMBER OF THE ORDERS
SELECT TOP 3 C.COUNTRY, COUNT(DISTINCT O.ORDERID) AS 'LEAST_ORDERS'
FROM Customers C
JOIN ORDERS O
ON C.CustomerID = O.CustomerID
GROUP BY C.Country
ORDER BY LEAST_ORDERS;

-- TO GENERATE TOTAL_ORDER_AMOUNT, TOTAL REVENUE, TOTAL PROFIT AND PROFIT MARGIN FOR EACH ORDER ID
SELECT O.ORDERID, TOTAL_ORDER_AMOUNT, SUM(O.TOTAL_ORDER_AMOUNT * OD.QUANTITY) AS 'TOTAL_REVENUE',
(SUM(O.TOTAL_ORDER_AMOUNT * OD.QUANTITY) - TOTAL_ORDER_AMOUNT) AS 'TOTAL_PROFIT',
round((SUM(O.TOTAL_ORDER_AMOUNT * OD.QUANTITY) - TOTAL_ORDER_AMOUNT) / (SUM(O.TOTAL_ORDER_AMOUNT * OD.QUANTITY)),4) * 100 AS 'PROFIT_MARGIN'
FROM ORDERS AS O JOIN OrderDetails AS OD ON O.OrderID = OD.OrderID
--JOIN Products AS P ON P.ProductID = OD.ProductID
GROUP BY O.OrderID, Total_order_amount
ORDER BY O.OrderID;

-- PRINT THE DETAILS OF ALL DIFFERENT PAYMENT METHODS ALONGWITH THE TOTAL AMOUNT OF MONEY TRANSACTED IN YEAR 2020 AND 2021. PRINT THE PAYMENT TYPE, ALLOWED
-- TRANSACTION VALUE IN 2020, 2021 AND THE SORT THE OUTPUT IN THE ASC ORDER OF PAYMENT TYPE
SELECT P.PAYMENTTYPE, P.ALLOWED, ROUND(SUM(DISTINCT(CASE WHEN YEAR(O.ORDERDATE) = '2020' THEN TOTAL_ORDER_AMOUNT END)), 2) AS 'TRANSACTION_VALUE_IN_2020',
ROUND(SUM(DISTINCT(CASE WHEN YEAR(O.ORDERDATE) = '2021' THEN TOTAL_ORDER_AMOUNT END)), 2) AS 'TRANSACTION_VALUE_IN_2021'
FROM Orders O JOIN Payments P ON O.PaymentID = P.PaymentID
GROUP BY P.PaymentType, P.Allowed
ORDER BY P.PaymentType;

-- PRINT THE PRODUCT_ID, QUANTITY AND ORDER DATE FOR DAILY TOP 3 SELLING PRODUCTS BETWEEN JAN 2020 TO MARCH 2020 AND THEN SORT RESULTS IN ASC ORDER OF ORDER DATE, ASC ORDER OF QUANTITY
WITH CTE AS (SELECT PRODUCTID, SUM(QUANTITY) AS 'TOTAL', ORDERDATE FROM Orders O JOIN OrderDetails OD
ON O.OrderID = OD.OrderID WHERE ORDERDATE BETWEEN '2020-01-01' AND '2020-03-31'
GROUP BY ProductID, OrderDate)
SELECT PRODUCTID, TOTAL, ORDERDATE FROM
(SELECT PRODUCTID, TOTAL, ORDERDATE, DENSE_RANK() OVER (PARTITION BY ORDERDATE ORDER BY TOTAL DESC) AS 'RNK' FROM CTE) AS X
WHERE RNK <= 3
ORDER BY ORDERDATE, TOTAL;

-- IDENTIFY THE PRODUCTS WHOSE NAMES CONSISTS OF THE WORD 'BABY'. THEN COUNT THE NUMBER FOR EACH CATEGORY AND SUB CATEGORY.
--PRINT CATEGORY ID, CATEGORY NAME, SUB CATEGORY AND FOLLOWED BY THE COUNT AND THEN SORT THE OUTOUT ON THE BASIS OF CATEGORY ID IN ASC, FOLLOWED BY SUB
SELECT CATEGORY_ID, CATEGORYNAME, SUB_CATEGORY, COUNT(*) FROM CATEGORY C
JOIN PRODUCTS P ON C.CategoryID = P.Category_ID
WHERE Product LIKE '%BABY%'
GROUP BY Category_ID, CategoryName, Sub_Category
ORDER BY Category_ID, Sub_Category;